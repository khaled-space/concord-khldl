# Script to perform burst model comparisons using multinest on the burst
# triplet grid generated by Zac Johnston
#
# Duncan.Galloway@monash.edu, 2019 Feb
#
# Initialise the environment

import concord as cd
import pymultinest
import numpy as np
import math
import astropy.io.ascii as ascii


def mnPrior(cube, ndim, nparams):
    '''
    Prior function for use with pymultinest. Should transform the unit 
    cube into the parameter cube.
    Parameter order (equivalent to dimensions of cube) is: 
    distance (kpc), inclination (degrees), redshift, and offset time 
    (seconds)'''

# Distance is in the range 1-16 kpc
    cube[0] = 1. + cube[0]*15.
    
# inclination in the range 0-90; could be more restrictive for a non-dipper
    cube[1] = np.arcsin(cube[1])*180./np.pi

# redshift is in the range 1-2
    cube[2] = 1. + cube[2]
    
# one or more time offsets are in the range -20,+20
    for i in range(ndim-3):
        cube[i+3] = (cube[i+3]-0.5)*40.

# ------- --------- --------- --------- --------- --------- --------- ---------

def Loglike(cube, ndim, nparams):
    '''
    Function to return the likelihood, takes as input the parameter cube
    and should return the logarithm of the likelihood.
    Don't know how to pass additional parameters to this function
    (ans: seems we don't need to, we can just access them as global 
    variables)
    Although the cube parameter name implies multiple parameter points to
    evaluate, practically it seems to only have one
    Compares obs to models, with weights weight, and disk model disk
    '''
    
#    param = np.array([cube[0],cube[1],cube[2],cube[3]])
    param = [cube[0],cube[1],cube[2],cube[3]]
#    print (param)
    for i in range(len(obs)-1):
        param.append(cube[i+4])
    param = np.array(param)

    loglikelihood = cd.lhoodClass(param, ll_obs, ll_model,
        weights = ll_weights, disc_model = ll_disk)

    return loglikelihood

# ------- --------- --------- --------- --------- --------- --------- ---------

# Read in all three observed bursts from the reference sample of Galloway
# et al. (2017)

# b = ObservedBurst('gs1826-24_4.177h.dat',path='../../burst/reference/')
# b = cd.ObservedBurst.ref('GS 1826-24',4.177)

b1 = cd.ObservedBurst.ref('GS 1826-24',3.53)
b2 = cd.ObservedBurst.ref('GS 1826-24',4.177)
b3 = cd.ObservedBurst.ref('GS 1826-24',5.14)

obs = (b3,b2,b1)

# Now read in the grid table and loop over all the triplets

path='kepler/kepler_grids/sources/triplets'
data = ascii.read(path+'/grid_table_triplets.txt')

n = len(data)
done = np.zeros(n, dtype=bool)
print(len(done), n)

# Total no. of parameters, should be equal to ndims in most cases but if
# you need to store some additional parameters with the actual parameters
# then you need to pass them through the likelihood routine.

n_params = 3+len(obs)

# Default parameters for all the fits

ll_weights = {'fluxwt':1.0, 'tdelwt':2.5e3}
ll_disk = 'he16_a'

ntrip = 0
i = 0
for i in range(n):
# if i == 0:
    if done[i]:
        print("Skipping already completed row #{}".format(i))
    else:

        # Now from a single row, identify the two other members of the triplet

        print(data[['accrate', 'acc_mult', 'x', 'z', 'qb', 'mass', 'radius']][i])

        match = np.logical_and(data['acc_mult'] == data['acc_mult'][i],
                np.logical_and(data['x'] == data['x'][i],
                np.logical_and(data['z'] == data['z'][i],
                np.logical_and(data['qb'] == data['qb'][i],
                               data['mass'] == data['mass'][i]))))
        print(data[['batch', 'run', 'accrate', 'acc_mult', 'x', 'z', 'qb', 'mass', 'radius']][match])
        ind = np.where(match)[0]

        if np.any(done[ind]):
            print("** ERROR ** shouldn't have done bursts")

        # Now also define three model bursts, from the triplet grid

        c1 = cd.KeplerBurst(source='triplets',grid_table='grid_table_triplets.txt',
                             batch=data['batch'][ind[0]],run=data['run'][ind[0]])

        c2 = cd.KeplerBurst(source='triplets',grid_table='grid_table_triplets.txt',
                            batch=data['batch'][ind[1]],run=data['run'][ind[1]])

        c3 = cd.KeplerBurst(source='triplets',grid_table='grid_table_triplets.txt',
                            batch=data['batch'][ind[2]],run=data['run'][ind[2]])

        models = (c1, c2, c3)

# Low-metallicity run supplied by Z. Johnston, 2017 April
# accretion rate, fuel composition and recurrence time were all provided by Zac;
# xi, g and R_NS are guesses

# c=KeplerBurst(filename='mean_run930.dat',lAcc=0.108,Z=0.005,H=0.7,
#               tdel=4.5/1.259,tdel_err=0.2/1.259,
#               g = 1.86552e+14*u.cm/u.s**2, R_NS=11.2*u.km)

# Here are the parameters we're going to fit. Accessing these as global 
# variables in the function above

        ll_obs = obs
        ll_model = models

# Not clear how to pass the walker positions, nor the inputs to lhoodClass
# to multinest

        print ("Now running multinest...")
        pymultinest.run(Loglike, mnPrior, n_params,
            outputfiles_basename='out/{}-{}_'.format(data['batch'][i],data['run'][i]),
            resume = False, verbose = True)
        print ("...done")

        # Finally mark the bursts done and increment the counter

        done[ind] = True
        ntrip += 1

print(n, ntrip)
